[33mcommit bd87dbc309b982eb38f76dcdac24df392998cc42[m[33m ([m[1;36mHEAD -> [m[1;32mshivank-language[m[33m, [m[1;31mfork/shivank-language[m[33m)[m
Author: shivank <shivankkunwar100@gmail.com>
Date:   Mon Sep 4 10:10:04 2023 +0530

    updates error detection

[1mdiff --git a/__init__.py b/__init__.py[m
[1mnew file mode 100644[m
[1mindex 0000000..a19f84a[m
[1m--- /dev/null[m
[1m+++ b/__init__.py[m
[36m@@ -0,0 +1,2 @@[m
[32m+[m[32mfrom .bot import bot[m
[32m+[m[32mfrom .message import Message[m
\ No newline at end of file[m
[1mdiff --git a/bot.py b/bot.py[m
[1mnew file mode 100644[m
[1mindex 0000000..9984202[m
[1m--- /dev/null[m
[1m+++ b/bot.py[m
[36m@@ -0,0 +1,44 @@[m
[32m+[m[32mimport functions_framework[m
[32m+[m
[32m+[m[32m@functions_framework.http[m
[32m+[m[32mdef bot():[m
[32m+[m[32m    def bot_message(func):[m
[32m+[m[32m        def bot_function(*args):[m
[32m+[m[32m            request = args[0][m
[32m+[m[32m            if request.method == 'OPTIONS':[m
[32m+[m[32m                # Allows GET requests from any origin with the Content-Type[m
[32m+[m[32m                # header and caches preflight response for an 3600s[m
[32m+[m[32m                headers = {[m
[32m+[m[32m                    'Access-Control-Allow-Origin': '*',[m
[32m+[m[32m                    'Access-Control-Allow-Methods': 'GET',[m
[32m+[m[32m                    'Access-Control-Allow-Headers': 'Content-Type',[m
[32m+[m[32m                    'Access-Control-Max-Age': '3600'[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                return ('', 204, headers)[m[41m   [m
[32m+[m[41m            [m
[32m+[m[32m            # Set CORS headers for the main request[m
[32m+[m[32m            headers = {[m
[32m+[m[32m                'Access-Control-Allow-Origin': '*'[m
[32m+[m[32m            }[m
[32m+[m[32m            post_body = request.json[m
[32m+[m[32m            history_messages = post_body['data']['message_history'][m
[32m+[m[32m            state = post_body['data']['state'][m
[32m+[m
[32m+[m[32m            if not isinstance(history_messages, list):[m
[32m+[m[32m                return 'Error in processing', 402, headers[m
[32m+[m
[32m+[m[32m            resp = func(history_messages, state)[m
[32m+[m
[32m+[m[32m            history_messages.append({[m
[32m+[m[32m                "role": "assistant",[m
[32m+[m[32m                "content": resp["response"]["data"]["messages"][m
[32m+[m[32m            })[m
[32m+[m
[32m+[m[32m            return {[m
[32m+[m[32m                "message_history": history_messages,[m
[32m+[m[32m                "state": resp["response"]["data"]["state"],[m
[32m+[m[32m                "new_message": resp["response"]["data"]["messages"][m
[32m+[m[32m            }, resp['status_code'], headers[m
[32m+[m[32m        return bot_function[m
[32m+[m[32m    return bot_message[m
\ No newline at end of file[m
[1mdiff --git a/examples/language-bot/main.py b/examples/language-bot/main.py[m
[1mindex 9940348..22c944f 100644[m
[1m--- a/examples/language-bot/main.py[m
[1m+++ b/examples/language-bot/main.py[m
[36m@@ -3,12 +3,13 @@[m [mfrom textbase.models import OpenAI[m
 from typing import List[m
 [m
 # Load your OpenAI API key[m
[31m-OpenAI.api_key = ""[m
[32m+[m[32mOpenAI.api_key = "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"[m
 [m
 # Prompt for GPT-3.5 Turbo[m
 SYSTEM_PROMPT = """You are chatting with an AI language learning assistant. You can practice and learn a new language with me. [m
 I can provide vocabulary, quizzes, and even engage in conversations in your chosen language. [m
 Feel free to ask for vocabulary, grammar tips, or start a conversation to practice.[m
[32m+[m[32mAvailable options: "vocabulary", "quiz"[m
 """[m
 [m
 @bot()[m
[36m@@ -22,7 +23,7 @@[m [mdef on_message(message_history: List[Message], state: dict = None):[m
         if "vocabulary" in user_message[0]['value'].lower():[m
             # Provide a vocabulary word and its translation[m
             bot_response = OpenAI.generate([m
[31m-            system_prompt="Generate a new random un related to message history word and giveits translation.",[m
[32m+[m[32m            system_prompt="ask for what language user want then generate a new random un related to message history word and giveits translation.",[m
             message_history=message_history,[m
             model="gpt-3.5-turbo",[m
             )[m
[1mdiff --git a/message.py b/message.py[m
[1mnew file mode 100644[m
[1mindex 0000000..1d706e6[m
[1m--- /dev/null[m
[1m+++ b/message.py[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32mfrom pydantic import BaseModel[m
[32m+[m[32mfrom typing import List[m
[32m+[m
[32m+[m[32mclass Content(BaseModel):[m
[32m+[m[32m    data_type: str[m
[32m+[m[32m    value: str[m
[32m+[m
[32m+[m[32mclass Message(BaseModel):[m
[32m+[m[32m    role: str  # "user" or "assistant"[m
[32m+[m[32m    content: List[Content][m
\ No newline at end of file[m
[1mdiff --git a/models.py b/models.py[m
[1mnew file mode 100644[m
[1mindex 0000000..814ed53[m
[1m--- /dev/null[m
[1m+++ b/models.py[m
[36m@@ -0,0 +1,146 @@[m
[32m+[m[32mimport json[m
[32m+[m[32mimport openai[m
[32m+[m[32mimport requests[m
[32m+[m[32mimport time[m
[32m+[m[32mimport typing[m
[32m+[m[32mimport traceback[m
[32m+[m
[32m+[m[32mfrom textbase import Message[m
[32m+[m
[32m+[m[32m# Return list of values of content.[m
[32m+[m[32mdef get_contents(message: Message, data_type: str):[m
[32m+[m[32m    return [[m
[32m+[m[32m        {[m
[32m+[m[32m            "role": message["role"],[m
[32m+[m[32m            "content": content["value"][m
[32m+[m[32m        }[m
[32m+[m[32m        for content in message["content"][m
[32m+[m[32m        if content["data_type"] == data_type[m
[32m+[m[32m    ][m
[32m+[m
[32m+[m[32m# Returns content if it's non empty.[m
[32m+[m[32mdef extract_content_values(message: Message):[m
[32m+[m[32m    return [[m
[32m+[m[32m            content["content"][m
[32m+[m[32m            for content in get_contents(message, "STRING")[m
[32m+[m[32m            if content[m
[32m+[m[32m        ][m
[32m+[m
[32m+[m[32mclass OpenAI:[m
[32m+[m[32m    api_key = None[m
[32m+[m
[32m+[m[32m    @classmethod[m
[32m+[m[32m    def generate([m
[32m+[m[32m        cls,[m
[32m+[m[32m        system_prompt: str,[m
[32m+[m[32m        message_history: list[Message],[m
[32m+[m[32m        model="gpt-3.5-turbo",[m
[32m+[m[32m        max_tokens=3000,[m
[32m+[m[32m        temperature=0.7,[m
[32m+[m[32m    ):[m
[32m+[m[32m        assert cls.api_key is not None, "OpenAI API key is not set."[m
[32m+[m[32m        openai.api_key = cls.api_key[m
[32m+[m
[32m+[m[32m        filtered_messages = [][m
[32m+[m
[32m+[m[32m        for message in message_history:[m
[32m+[m[32m            #list of all the contents inside a single message[m
[32m+[m[32m            contents = get_contents(message, "STRING")[m
[32m+[m[32m            if contents:[m
[32m+[m[32m                filtered_messages.extend(contents)[m
[32m+[m
[32m+[m[32m        response = openai.ChatCompletion.create([m
[32m+[m[32m            model=model,[m
[32m+[m[32m            messages=[[m
[32m+[m[32m                {[m
[32m+[m[32m                    "role": "system",[m
[32m+[m[32m                    "content": system_prompt[m
[32m+[m[32m                },[m
[32m+[m[32m                *map(dict, filtered_messages),[m
[32m+[m[32m            ],[m
[32m+[m[32m            temperature=temperature,[m
[32m+[m[32m            max_tokens=max_tokens,[m
[32m+[m[32m        )[m
[32m+[m
[32m+[m[32m        return response["choices"][0]["message"]["content"][m
[32m+[m
[32m+[m[32mclass HuggingFace:[m
[32m+[m[32m    api_key = None[m
[32m+[m
[32m+[m[32m    @classmethod[m
[32m+[m[32m    def generate([m
[32m+[m[32m        cls,[m
[32m+[m[32m        system_prompt: str,[m
[32m+[m[32m        message_history: list[Message],[m
[32m+[m[32m        model: typing.Optional[str] = "microsoft/DialoGPT-large",[m
[32m+[m[32m        max_tokens: typing.Optional[int] = 3000,[m
[32m+[m[32m        temperature: typing.Optional[float] = 0.7,[m
[32m+[m[32m        min_tokens: typing.Optional[int] = None,[m
[32m+[m[32m        top_k: typing.Optional[int] = None[m
[32m+[m[32m    ) -> str:[m
[32m+[m[32m        try:[m
[32m+[m[32m            assert cls.api_key is not None, "Hugging Face API key is not set."[m
[32m+[m
[32m+[m[32m            headers = { "Authorization": f"Bearer { cls.api_key }" }[m
[32m+[m[32m            API_URL = "https://api-inference.huggingface.co/models/" + model[m
[32m+[m[32m            inputs = {[m
[32m+[m[32m                "past_user_inputs": [system_prompt],[m
[32m+[m[32m                "generated_responses": [f"Ok, I will answer according to the context, where context is '{system_prompt}'."],[m
[32m+[m[32m                "text": ""[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            for message in message_history:[m
[32m+[m[32m                if message["role"] == "user":[m
[32m+[m[32m                    inputs["past_user_inputs"].extend(extract_content_values(message))[m
[32m+[m[32m                else:[m
[32m+[m[32m                    inputs["generated_responses"].extend(extract_content_values(message))[m
[32m+[m
[32m+[m[32m            inputs["text"] = inputs["past_user_inputs"].pop(-1)[m
[32m+[m
[32m+[m[32m            payload = {[m
[32m+[m[32m                "inputs": inputs,[m
[32m+[m[32m                "max_length": max_tokens,[m
[32m+[m[32m                "temperature": temperature,[m
[32m+[m[32m                "min_length": min_tokens,[m
[32m+[m[32m                "top_k": top_k,[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            data = json.dumps(payload)[m
[32m+[m[32m            response = requests.request("POST", API_URL, headers=headers, data=data)[m
[32m+[m[32m            response = json.loads(response.content.decode("utf-8"))[m
[32m+[m
[32m+[m[32m            if response.get("error", None) == "Authorization header is invalid, use 'Bearer API_TOKEN'.":[m
[32m+[m[32m                print("Hugging Face API key is not correct.")[m
[32m+[m
[32m+[m[32m            if response.get("estimated_time", None):[m
[32m+[m[32m                print(f"Model is loading please wait for {response.get('estimated_time')}")[m
[32m+[m[32m                time.sleep(response.get("estimated_time"))[m
[32m+[m[32m                response = requests.request("POST", API_URL, headers=headers, data=data)[m
[32m+[m[32m                response = json.loads(response.content.decode("utf-8"))[m
[32m+[m
[32m+[m[32m            return response["generated_text"][m
[32m+[m
[32m+[m[32m        except Exception:[m
[32m+[m[32m            print(f"An exception occured while using this model, please try using another model.\nException: {traceback.format_exc()}.")[m
[32m+[m
[32m+[m[32mclass BotLibre:[m
[32m+[m[32m    application = None[m
[32m+[m[32m    instance = None[m
[32m+[m
[32m+[m[32m    @classmethod[m
[32m+[m[32m    def generate([m
[32m+[m[32m        cls,[m
[32m+[m[32m        message_history: list[Message],[m
[32m+[m[32m    ):[m
[32m+[m[32m        most_recent_message = get_contents(message_history[-1], "STRING")[m
[32m+[m
[32m+[m[32m        request = {[m
[32m+[m[32m            "application": cls.application,[m
[32m+[m[32m            "instance": cls.instance,[m
[32m+[m[32m            "message": most_recent_message[m
[32m+[m[32m        }[m
[32m+[m[32m        response = requests.post('https://www.botlibre.com/rest/json/chat', json=request)[m
[32m+[m[32m        data = json.loads(response.text) # parse the JSON data into a dictionary[m
[32m+[m[32m        message = data['message'][m
[32m+[m
[32m+[m[32m        return message[m
\ No newline at end of file[m
[1mdiff --git a/textbase_cli.py b/textbase_cli.py[m
[1mnew file mode 100644[m
[1mindex 0000000..76c7533[m
[1m--- /dev/null[m
[1m+++ b/textbase_cli.py[m
[36m@@ -0,0 +1,205 @@[m
[32m+[m[32mimport click[m
[32m+[m[32mimport requests[m
[32m+[m[32mimport subprocess[m
[32m+[m[32mimport os[m
[32m+[m[32mfrom tabulate import tabulate[m
[32m+[m[32mfrom time import sleep[m
[32m+[m[32mfrom yaspin import yaspin[m
[32m+[m[32mimport importlib.resources[m
[32m+[m[32mimport re[m
[32m+[m
[32m+[m[32mCLOUD_URL = "https://us-east1-chat-agents.cloudfunctions.net/deploy-from-cli"[m
[32m+[m[32mUPLOAD_URL = "https://us-east1-chat-agents.cloudfunctions.net/upload-file"[m
[32m+[m
[32m+[m[32m@click.group()[m
[32m+[m[32mdef cli():[m
[32m+[m[32m    pass[m
[32m+[m
[32m+[m[32m@cli.command()[m
[32m+[m[32m@click.option("--path", prompt="Path to the main.py file", required=True)[m
[32m+[m[32mdef test(path):[m
[32m+[m[32m    server_path = importlib.resources.files('textbase').joinpath('utils', 'server.py')[m
[32m+[m[32m    try:[m
[32m+[m[32m        if os.name == 'posix':[m
[32m+[m[32m            process_local_ui = subprocess.Popen(f'python3 {server_path}', shell=True)[m
[32m+[m[32m        else:[m
[32m+[m[32m            process_local_ui = subprocess.Popen(f'python {server_path}', shell=True)[m
[32m+[m
[32m+[m[32m        process_gcp = subprocess.Popen(f'functions_framework --target=on_message --source={path} --debug',[m
[32m+[m[32m                     shell=True,[m
[32m+[m[32m                     stdin=subprocess.PIPE)[m
[32m+[m[32m        process_local_ui.communicate()[m
[32m+[m[32m        process_gcp.communicate()  # Wait for the process to finish[m
[32m+[m[32m    except KeyboardInterrupt:[m
[32m+[m[32m        process_gcp.kill()  # Stop the process when Ctrl+C is pressed[m
[32m+[m[32m        process_local_ui.kill()[m
[32m+[m[32m        click.secho("Server stopped.", fg='red')[m
[32m+[m
[32m+[m
[32m+[m[32m#################################################################################################################[m
[32m+[m[32mdef validate_bot_name(ctx, param, value):[m
[32m+[m[32m    pattern = r'^[a-z0-9_-]+$'[m
[32m+[m[32m    if not re.match(pattern, value):[m
[32m+[m[32m        error_message = click.style('Bot name can only contain lowercase alphanumeric characters, hyphens, and underscores.', fg='red')[m
[32m+[m[32m        raise click.BadParameter(error_message)[m
[32m+[m[32m    return value[m
[32m+[m
[32m+[m[32m@cli.command()[m
[32m+[m[32m@click.option("--path", prompt="Path to the zip folder", required=True)[m
[32m+[m[32m@click.option("--bot_name", prompt="Name of the bot", required=True, callback=validate_bot_name)[m
[32m+[m[32m@click.option("--api_key", prompt="Textbase API Key", required=True)[m
[32m+[m[32mdef deploy(path, bot_name, api_key):[m
[32m+[m[32m    click.echo(click.style(f"Deploying bot '{bot_name}' with zip folder from path: {path}", fg='yellow'))[m
[32m+[m
[32m+[m[32m    headers = {[m
[32m+[m[32m        "Authorization": f"Bearer {api_key}"[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    files = {[m
[32m+[m[32m        "file": open(path, "rb"),[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    data = {[m
[32m+[m[32m        "botName": bot_name[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    with yaspin(text="Uploading...", color="yellow") as spinner:[m
[32m+[m[32m        response = requests.post([m
[32m+[m[32m            UPLOAD_URL,[m
[32m+[m[32m            headers=headers,[m
[32m+[m[32m            data=data,[m
[32m+[m[32m            files=files[m
[32m+[m[32m        )[m
[32m+[m
[32m+[m[32m    if response.ok:[m
[32m+[m[32m        click.echo(click.style("Upload completed successfully! ✅", fg='green'))[m
[32m+[m[32m        response_data = response.json()[m
[32m+[m[32m        error = response_data.get('error')[m
[32m+[m[32m        data = response_data.get('data')[m
[32m+[m[32m        if not error and data:[m
[32m+[m[32m            message = data.get('message')[m
[32m+[m[32m            # Parse the message to extract bot ID and URL[m
[32m+[m[32m            parts = message.split('. ')[m
[32m+[m[32m            bot_id = parts[1].split(' ')[-1][m
[32m+[m[32m            url = parts[2].split(' ')[-1][m
[32m+[m[32m            # Create a list of dictionaries for tabulate[m
[32m+[m[32m            data_list = [{'Status': parts[0], 'Bot ID': bot_id, 'URL': url}][m
[32m+[m[32m            table = tabulate(data_list, headers="keys", tablefmt="pretty")[m
[32m+[m[32m            click.echo(click.style("Deployment details:", fg='blue'))[m
[32m+[m[32m            click.echo(table)[m
[32m+[m[32m        else:[m
[32m+[m[32m            click.echo(click.style("Something went wrong! ❌", fg='red'))[m
[32m+[m[32m            click.echo(response.text)[m
[32m+[m[32m    else:[m
[32m+[m[32m        click.echo(click.style("Something went wrong! ❌", fg='red'))[m
[32m+[m[32m        click.echo(response.text)[m
[32m+[m[32m#################################################################################################################[m
[32m+[m
[32m+[m[32m@cli.command()[m
[32m+[m[32m@click.option("--bot_id", prompt="Id of the bot", required=True)[m
[32m+[m[32m@click.option("--api_key", prompt="Textbase API Key", required=True)[m
[32m+[m[32mdef health(bot_id, api_key):[m
[32m+[m[32m    click.echo(click.style(f"Checking health of bot '{bot_id}' with API key: {api_key}", fg='green'))[m
[32m+[m
[32m+[m[32m    # the user would get the bot_id from the GET /list and use it here[m
[32m+[m[32m    cloud_url = f"{CLOUD_URL}/bot-health"[m
[32m+[m
[32m+[m[32m    headers = {[m
[32m+[m[32m        "Authorization": f"Bearer {api_key}"[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    params = {[m
[32m+[m[32m        "botId": bot_id[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    response = requests.get(cloud_url, headers=headers, params=params)[m
[32m+[m
[32m+[m[32m    if response.ok:[m
[32m+[m[32m        response_data = response.json()[m
[32m+[m[32m        data = response_data.get('data')[m
[32m+[m[32m        if data is not None:[m
[32m+[m[32m            # Convert the data dictionary to a list of dictionaries for tabulate[m
[32m+[m[32m            data_list = [data][m
[32m+[m[32m            table = tabulate(data_list, headers="keys", tablefmt="pretty")[m
[32m+[m[32m            click.echo(click.style("Bot status:", fg='green'))[m
[32m+[m[32m            click.echo(table)[m
[32m+[m[32m        else:[m
[32m+[m[32m            click.echo(click.style("Status information not found in the response.", fg='red'))[m
[32m+[m[32m            click.echo(response_data)[m
[32m+[m[32m    else:[m
[32m+[m[32m        click.echo(click.style("Failed to retrieve bot status.", fg='red'))[m
[32m+[m
[32m+[m
[32m+[m[32m@cli.command()[m
[32m+[m[32m@click.option("--api_key", prompt="Textbase API Key", required=True)[m
[32m+[m[32mdef list(api_key):[m
[32m+[m[32m    click.echo(click.style("Getting the list of bots...", fg='green'))[m
[32m+[m
[32m+[m[32m    cloud_url = f"{CLOUD_URL}/list"[m
[32m+[m
[32m+[m[32m    headers = {[m
[32m+[m[32m        "Authorization": f"Bearer {api_key}"[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    response = requests.get([m
[32m+[m[32m        cloud_url,[m
[32m+[m[32m        headers=headers[m
[32m+[m[32m    )[m
[32m+[m
[32m+[m[32m    if response.ok:[m
[32m+[m[32m        data = response.json().get('data', [])[m
[32m+[m[32m        if data:[m
[32m+[m[32m            # Reorder the dictionaries in the data list[m
[32m+[m[32m            reordered_data = [{'id': d['id'], 'name': d['name'], 'url': d['url']} for d in data][m
[32m+[m[32m            table = tabulate(reordered_data, headers="ke